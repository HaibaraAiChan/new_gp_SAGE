import torch
import torch.nn as nn
# import torch.nn.functional as F

# rnn = nn.LSTM(10, 20, 1)
# input = torch.randn(5, 3, 10)
# h0 = torch.randn(1, 3, 20)
# c0 = torch.randn(1, 3, 20)
# output, (hn, cn) = rnn(input, (h0, c0))
# print()

# data = {1: 13428, 2: 11706, 3: 9277, 4: 7320, 5: 6222, 6: 4868, 7: 4045, 8: 3472, 9: 2976, 10: 2599, 11: 2203, 12: 1937, 13: 1656, 100: 1541, 14: 1434, 15: 1289, 16: 1111, 17: 1030, 18: 948, 19: 836, 20: 807, 21: 717, 22: 556, 24: 525, 23: 519, 25: 483, 26: 409, 27: 390, 28: 370, 29: 329, 31: 300, 32: 273, 30: 261, 33: 261, 34: 231, 36: 226, 35: 200, 39: 200, 37: 196, 38: 186, 41: 167, 42: 165, 40: 161, 45: 142, 43: 138, 44: 135, 48: 112, 46: 106, 47: 105, 51: 104, 49: 91, 55: 90, 50: 89, 52: 81, 53: 79, 54: 78, 58: 73, 56: 71, 61: 69, 67: 68, 57: 68, 72: 63, 60: 63, 62: 62, 59: 55, 65: 54, 63: 52, 66: 51, 64: 49, 69: 47, 70: 44, 71: 43, 68: 42, 77: 40, 86: 39, 87: 38, 74: 36, 75: 35, 82: 35, 81: 35, 84: 33, 73: 32, 80: 31, 76: 31, 94: 29, 98: 29, 83: 29, 95: 27, 79: 27, 85: 27, 91: 27, 99: 26, 88: 25, 92: 24, 89: 24, 90: 23, 93: 22, 78: 22, 97: 21, 96: 20}

# print(dict(sorted(data.items())))
# [(1, 13428), (2, 11706), (3, 9277), (4, 7320), (5, 6222), (6, 4868), (7, 4045), (8, 3472), (9, 2976), (10, 2599), (11, 2203), (12, 1937), (13, 1656), (14, 1434), (15, 1289), (16, 1111), (17, 1030), (18, 948), (19, 836), (20, 807), (21, 717), (22, 556), (23, 519), (24, 525), (25, 483), (26, 409), (27, 390), (28, 370), (29, 329), (30, 261), (31, 300), (32, 273), (33, 261), (34, 231), (35, 200), (36, 226), (37, 196), (38, 186), (39, 200), (40, 161), (41, 167), (42, 165), (43, 138), (44, 135), (45, 142), (46, 106), (47, 105), (48, 112), (49, 91), (50, 89), (51, 104), (52, 81), (53, 79), (54, 78), (55, 90), (56, 71), (57, 68), (58, 73), (59, 55), (60, 63), (61, 69), (62, 62), (63, 52), (64, 49), (65, 54), (66, 51), (67, 68), (68, 42), (69, 47), (70, 44), (71, 43), (72, 63), (73, 32), (74, 36), (75, 35), (76, 31), (77, 40), (78, 22), (79, 27), (80, 31), (81, 35), (82, 35), (83, 29), (84, 33), (85, 27), (86, 39), (87, 38), (88, 25), (89, 24), (90, 23), (91, 27), (92, 24), (93, 22), (94, 29), (95, 27), (96, 20), (97, 21), (98, 29), (99, 26), (100, 1541)]
# {1: 13428, 2: 11706, 3: 9277, 4: 7320, 5: 6222, 6: 4868, 7: 4045, 8: 3472, 9: 2976, 10: 2599, 11: 2203, 12: 1937, 13: 1656, 14: 1434, 15: 1289, 16: 1111, 17: 1030, 18: 948, 19: 836, 20: 807, 21: 717, 22: 556, 23: 519, 24: 525, 25: 483, 26: 409, 27: 390, 28: 370, 29: 329, 30: 261, 31: 300, 32: 273, 33: 261, 34: 231, 35: 200, 36: 226, 37: 196, 38: 186, 39: 200, 40: 161, 41: 167, 42: 165, 43: 138, 44: 135, 45: 142, 46: 106, 47: 105, 48: 112, 49: 91, 50: 89, 51: 104, 52: 81, 53: 79, 54: 78, 55: 90, 56: 71, 57: 68, 58: 73, 59: 55, 60: 63, 61: 69, 62: 62, 63: 52, 64: 49, 65: 54, 66: 51, 67: 68, 68: 42, 69: 47, 70: 44, 71: 43, 72: 63, 73: 32, 74: 36, 75: 35, 76: 31, 77: 40, 78: 22, 79: 27, 80: 31, 81: 35, 82: 35, 83: 29, 84: 33, 85: 27, 86: 39, 87: 38, 88: 25, 89: 24, 90: 23, 91: 27, 92: 24, 93: 22, 94: 29, 95: 27, 96: 20, 97: 21, 98: 29, 99: 26, 100: 1541}

# ----------------------------------------------------------------ogbn-arxiv below infeat 128
# data = {1: 13428, 2: 11706, 3: 9277, 4: 7320, 5: 6222, 6: 4868, 7: 4045, 8: 3472, 9: 2976, 10: 2599, 11: 2203, 12: 1937, 13: 1656, 14: 1434, 15: 1289, 16: 1111, 17: 1030, 18: 948, 19: 836, 20: 807, 21: 717, 22: 556, 23: 519, 24: 525, 25: 483, 26: 409, 27: 390, 28: 370, 29: 329, 30: 261, 31: 300, 32: 273, 33: 261, 34: 231, 35: 200, 36: 226, 37: 196, 38: 186, 39: 200, 40: 161, 41: 167, 42: 165, 43: 138, 44: 135, 45: 142, 46: 106, 47: 105, 48: 112, 49: 91, 50: 89, 51: 104, 52: 81, 53: 79, 54: 78, 55: 90, 56: 71, 57: 68, 58: 73, 59: 55, 60: 63, 61: 69, 62: 62, 63: 52, 64: 49, 65: 54, 66: 51, 67: 68, 68: 42, 69: 47, 70: 44, 71: 43, 72: 63, 73: 32, 74: 36, 75: 35, 76: 31, 77: 40, 78: 22, 79: 27, 80: 31, 81: 35, 82: 35, 83: 29, 84: 33, 85: 27, 86: 39, 87: 38, 88: 25, 89: 24, 90: 23, 91: 27, 92: 24, 93: 22, 94: 29, 95: 27, 96: 20, 97: 21, 98: 29, 99: 26, 100: 1541}
# res=0
# for key in (data):
#     val = data[key]
#     print(str(key) + ', '+str(val)+' '+str(key*val*128*4/1024/1024/1024))
#     res += key*val*128*4

# res = res/1024/1024/1024
# print(res)
# res18=res*18
# print('*18 total consumption: ', res18)
# res17=res*17
# print('*17 total consumption: ', res17)
# ----------------------------------------------------------------ogbn-products below infeat 15 lstm
# data = {15: 189452, 14: 695, 7: 655, 10: 640, 11: 624, 13: 615, 12: 583, 9: 576, 6: 550, 8: 512, 4: 456, 5: 445, 3: 374, 2: 221, 1: 173}
# data = dict(sorted(data.items()))
# print(data)
# res=0
# for key in (data):
#     val = data[key]
#     print(str(key) + ', '+str(val)+' '+str(key*val*100*4/1024/1024/1024))
#     res += key*val*100*4

# res = res/1024/1024/1024
# print(res)
# res=res*18
# print('total consumption: ', res)

# -------------------------------------------------------------------------ogbn-products below infeat 100 mean
# data = {100: 111012, 77: 1190, 79: 1185, 81: 1185, 88: 1183, 84: 1177, 75: 1169, 78: 1169, 83: 1165, 85: 1164, 82: 1160, 67: 1158, 87: 1156, 91: 1154, 86: 1151, 76: 1145, 89: 1142, 92: 1119, 80: 1117, 90: 1108, 69: 1107, 93: 1088, 71: 1080, 73: 1080, 94: 1069, 74: 1069, 70: 1068, 68: 1053, 72: 1052, 99: 1042, 97: 1034, 96: 1020, 95: 1017, 54: 996, 65: 994, 61: 981, 66: 977, 98: 963, 52: 959, 62: 959, 48: 958, 58: 957, 63: 955, 64: 953, 59: 950, 43: 933, 60: 930, 51: 928, 47: 927, 57: 923, 56: 913, 53: 907, 55: 907, 45: 884, 49: 879, 50: 877, 41: 861, 40: 852, 39: 816, 42: 813, 46: 807, 44: 806, 33: 793, 37: 791, 38: 775, 28: 768, 35: 754, 36: 741, 32: 727, 14: 695, 31: 691, 30: 689, 34: 677, 15: 673, 25: 671, 26: 659, 7: 655, 23: 648, 27: 646, 24: 645, 29: 643, 10: 640, 11: 624, 13: 615, 16: 614, 18: 604, 22: 592, 21: 586, 19: 584, 12: 583, 9: 576, 20: 572, 17: 556, 6: 550, 8: 512, 4: 456, 5: 445, 3: 374, 2: 221, 1: 173}


# data = dict(sorted(data.items()))
# print(data)
# res=0
# for key in (data):
#     val = data[key]
#     print(str(key) + ', '+str(val)+' '+str(key*val*100*4/1024/1024/1024))
#     res += 1*val*100*4

# res = res/1024/1024/1024
# print(res)
# res=res*6
# print('total consumption: ', res)

# import matplotlib.pyplot as plt
# import numpy as np

# x=[[27627, 13814], [2976,1488],
#   [3472, 1736], [4045, 2023],
#   [4868, 2434],[6222,3111],
#   [7320,3660],[9277,4639],
#   [11706,5853],[13428,6714]]
# y=[[2.15803,1.06633], [0.21174,0.1101],
#   [0.21827,0.1099],[0.2241,0.11037],
#   [0.2409,0.1242],[0.2473,0.12395],
#   [0.22125,0.1156],[0.21461,0.11068],
#   [0.18782,0.0965],[0.38114,0.31187]]

# for i in range(10):
#     plt.plot(x[i], y[i], label = "in-degree "+str(10-i))
# plt.legend()
# # plt.savefig('test.png')
# plt.show()

# x=[800,400,200,150,100,50,40,30,20,10]
# y=[0.9076,0.83097,0.6864,0.6072,0.4933,0.31174,0.267,0.2236,0.1764,0.16247]

# y2=[0.3124,0.2899,0.2503,0.2265,0.1951,0.1417,0.12927,0.1169,0.1025,0.08851]

# plt.plot(x, y, 'b--',label = " max mem")
# # plt.plot(x, y2, label = "real mem ")
# x3=[50,40,30,20,15,10]
# y3=[0.31174,0.267,0.2236,0.1764,0.171268,0.16247]
# plt.plot(x3, y3, 'r+')
# plt.plot(x3, y3, 'g',label = "linear  ")
# plt.legend()
# # plt.savefig('test.png')
# plt.show()

def subtract(L1, L2):
    return [x1 - x2 for x1, x2 in zip(L1, L2)]


list2 = [0.0677027702331543, 0.06886053085327148, 0.07064390182495117,
         0.07246732711791992, 0.07283830642700195, 0.07370901107788086,
         0.07504034042358398, 0.0752100944519043, 0.0758209228515625, 0.07759523391723633,
         0.07877111434936523, 0.08087015151977539, 0.08203840255737305, 
         0.08351755142211914, 0.08465957641601562, 0.08589887619018555, 0.08754873275756836, 0.08794069290161133]


list1 = [0.15793371200561523,
         0.15925168991088867,
         0.16118764877319336,
         0.16414070129394530,
         0.16386461257934570,
         0.1653428077697754,
         0.1664586067199707,
         0.16679811477661133,
         0.16756534576416016,
         0.1696152687072754,
         0.17132997512817383,
         0.17412710189819336,
         0.1757502555847168,
         0.17755365371704102,
         0.1795825958251953,
         0.1815028190612793,
         0.18366289138793945,
         0.1844468116760254, ]

print(subtract(list1, list2))
print(len(list1))
# [0.09023094177246094, 0.09039115905761719, 0.09054374694824219, 0.09167337417602539, 
# 0.09102630615234375, 0.09163379669189453, 0.09141826629638672, 0.09158802032470703, 
# 0.09174442291259766, 0.09202003479003906, 0.0925588607788086, 0.09325695037841797, 
# 0.09371185302734375,  0.09403610229492188, 0.09492301940917969, 0.09560394287109375, 
# 0.0961141586303711, 0.09650611877441406]

# x3 = [5, 6, 7, 8, 
# 9, 10, 11, 12, 
# 13,15, 20, 30, 
# 40,50,10,200,
# 400,800]
# y3 = [0.09023094177246094, 0.09039115905761719, 0.09054374694824219, 0.09167337417602539, 0.09102630615234375, 0.09163379669189453, 0.09141826629638672, 0.09158802032470703, 0.09174442291259766, 0.09202003479003906, 0.0925588607788086, 0.09325695037841797, 0.09371185302734375, 0.09403610229492188, 0.09492301940917969, 0.09560394287109375, 0.0961141586303711, 0.09650611877441406]
# plt.plot(x3, y3, 'r+')
# plt.plot(x3, y3, 'g', label="linear  ")
# plt.legend()
# # plt.savefig('test.png')
# plt.show()
