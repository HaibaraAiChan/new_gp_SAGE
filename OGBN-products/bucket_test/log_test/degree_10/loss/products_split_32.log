main start at this time 1670385791.998485
-----------------------------------------before load data 
 Nvidia-smi: 0.2530517578125 GB
    Memory Allocated: 0.0  GigaBytes
Max Memory Allocated: 0.0  GigaBytes

#nodes: 2449029
#edges: 123718024
#classes: 47
success----------------------------------------
196571
39255
2164782
# Nodes: 2400608
# Edges: 123718024
# Train: 196571
# Val: 39255
# Test: 2164782
# Classes: 47

----------------------------------------start of run function 
 Nvidia-smi: 0.2530517578125 GB
    Memory Allocated: 0.0  GigaBytes
Max Memory Allocated: 0.0  GigaBytes

in feats:  100
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.3643798828125 GB
    Memory Allocated: 0.31894922256469727  GigaBytes
Max Memory Allocated: 0.31972694396972656  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6129, 6130, 6131], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.6964111328125 GB
    Memory Allocated: 0.8041973114013672  GigaBytes
Max Memory Allocated: 1.5411653518676758  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1461)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7042236328125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5411653518676758  GigaBytes

v3.py : output nodes local nid:  tensor([6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7042236328125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5411653518676758  GigaBytes

core.py bucket local nid tensor([ 6132,  6133,  6134,  ..., 12274, 12275, 12276], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1452)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([12277, 12278, 12279, 12280, 12281, 12282, 12283, 12284, 12285, 12286],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([12277, 12278, 12279,  ..., 18448, 18449, 18450], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1463)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([18451, 18452, 18453, 18454, 18455, 18456, 18457, 18458, 18459, 18460],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([18451, 18452, 18453,  ..., 24595, 24596, 24597], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1484)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([24598, 24599, 24600, 24601, 24602, 24603, 24604, 24605, 24606, 24607],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([24598, 24599, 24600,  ..., 30745, 30746, 30747], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1462)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([30748, 30749, 30750, 30751, 30752, 30753, 30754, 30755, 30756, 30757],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([30748, 30749, 30750,  ..., 36883, 36884, 36885], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1467)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([36886, 36887, 36888, 36889, 36890, 36891, 36892, 36893, 36894, 36895],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([36886, 36887, 36888,  ..., 43033, 43034, 43035], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1492)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([43036, 43037, 43038, 43039, 43040, 43041, 43042, 43043, 43044, 43045],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([43036, 43037, 43038,  ..., 49181, 49182, 49183], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1468)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([49184, 49185, 49186, 49187, 49188, 49189, 49190, 49192, 49193, 49194],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([49184, 49185, 49186,  ..., 55315, 55316, 55317], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1524)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([55318, 55319, 55320, 55321, 55322, 55323, 55324, 55325, 55326, 55327],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([55318, 55319, 55320,  ..., 61459, 61460, 61461], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1444)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([61462, 61463, 61464, 61465, 61466, 61467, 61468, 61469, 61470, 61471],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([61462, 61463, 61464,  ..., 67595, 67596, 67597], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1483)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([67598, 67599, 67600, 67601, 67602, 67603, 67604, 67605, 67606, 67607],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([67598, 67599, 67600,  ..., 73741, 73742, 73743], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1449)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([73744, 73745, 73746, 73747, 73748, 73749, 73750, 73751, 73752, 73753],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([73744, 73745, 73746,  ..., 79904, 79905, 79906], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1470)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([79907, 79908, 79909, 79910, 79911, 79912, 79914, 79915, 79916, 79917],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([79907, 79908, 79909,  ..., 86045, 86046, 86047], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1446)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([86048, 86050, 86051, 86052, 86053, 86054, 86055, 86056, 86057, 86058],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([86048, 86050, 86051,  ..., 92187, 92188, 92189], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1473)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([92190, 92191, 92192, 92193, 92194, 92195, 92196, 92197, 92198, 92199],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([92190, 92191, 92192,  ..., 98331, 98332, 98333], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1474)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([98334, 98335, 98336, 98337, 98338, 98339, 98340, 98341, 98342, 98343],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([ 98334,  98335,  98336,  ..., 104466, 104467, 104468], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1480)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([104469, 104470, 104471, 104472, 104473, 104474, 104475, 104476, 104477,
        104478], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([104469, 104470, 104471,  ..., 110595, 110596, 110597], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1478)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([110598, 110599, 110600, 110601, 110602, 110603, 110604, 110605, 110606,
        110607], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([110598, 110599, 110600,  ..., 116737, 116738, 116739], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1457)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([116740, 116741, 116742, 116743, 116744, 116745, 116746, 116747, 116748,
        116749], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([116740, 116741, 116742,  ..., 122870, 122871, 122872], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1459)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([122873, 122874, 122875, 122876, 122877, 122878, 122879, 122880, 122881,
        122882], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([122873, 122874, 122875,  ..., 128991, 128992, 128993], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1458)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([128994, 128995, 128996, 128997, 128998, 128999, 129000, 129001, 129002,
        129003], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([128994, 128995, 128996,  ..., 135126, 135127, 135128], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1452)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([135129, 135130, 135131, 135132, 135133, 135134, 135135, 135136, 135137,
        135138], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([135129, 135130, 135131,  ..., 141251, 141252, 141253], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1466)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([141254, 141255, 141256, 141257, 141258, 141259, 141260, 141261, 141263,
        141264], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([141254, 141255, 141256,  ..., 147394, 147395, 147396], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1461)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([147397, 147398, 147399, 147400, 147401, 147402, 147403, 147404, 147405,
        147406], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([147397, 147398, 147399,  ..., 153540, 153541, 153542], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1451)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([153544, 153545, 153546, 153547, 153548, 153549, 153550, 153551, 153552,
        153553], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([153544, 153545, 153546,  ..., 159679, 159680, 159681], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1470)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([159682, 159683, 159684, 159685, 159686, 159687, 159688, 159689, 159690,
        159691], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([159682, 159683, 159684,  ..., 165831, 165832, 165833], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1477)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([165834, 165835, 165836, 165837, 165838, 165839, 165840, 165841, 165842,
        165843], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([165834, 165835, 165836,  ..., 171991, 171992, 171993], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1473)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([171994, 171995, 171996, 171997, 171998, 171999, 172000, 172001, 172002,
        172003], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([171994, 171995, 171996,  ..., 178151, 178153, 178154], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1476)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([178155, 178156, 178157, 178158, 178159, 178160, 178161, 178162, 178163,
        178164], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([178155, 178156, 178157,  ..., 184301, 184302, 184303], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1464)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([184304, 184305, 184306, 184307, 184308, 184309, 184310, 184311, 184312,
        184313], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([184304, 184305, 184306,  ..., 190449, 190450, 190451], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8064098358154297  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1476)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521507263183594  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([190452, 190453, 190454, 190455, 190456, 190457, 190458, 190459, 190460,
        190461], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35521459579467773  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([190452, 190453, 190454,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.8046793937683105  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1456)
----------------------------------------- after loss backward 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.3548755645751953  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.6964)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 2.7784423828125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes


 Run 0| Epoch 0 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 2.7803955078125 GB
    Memory Allocated: 0.355194091796875  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6142, 6143, 6144], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8060245513916016  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1477)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

v3.py : output nodes local nid:  tensor([6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5777955055236816  GigaBytes

core.py bucket local nid tensor([ 6145,  6146,  6147,  ..., 12288, 12289, 12290], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1440)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([12291, 12292, 12293, 12294, 12295, 12296, 12297, 12298, 12300, 12301],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([12291, 12292, 12293,  ..., 18418, 18419, 18420], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1433)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([18421, 18422, 18423, 18424, 18425, 18426, 18427, 18428, 18429, 18430],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([18421, 18422, 18423,  ..., 24548, 24549, 24550], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1454)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([24551, 24552, 24553, 24554, 24555, 24556, 24557, 24558, 24559, 24560],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([24551, 24552, 24553,  ..., 30692, 30693, 30694], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1451)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([30695, 30697, 30698, 30699, 30700, 30701, 30702, 30703, 30704, 30705],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([30695, 30697, 30698,  ..., 36851, 36852, 36853], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1449)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([36854, 36855, 36856, 36857, 36858, 36859, 36860, 36861, 36862, 36863],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([36854, 36855, 36856,  ..., 43000, 43001, 43002], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1462)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([43003, 43004, 43005, 43006, 43007, 43008, 43009, 43010, 43011, 43012],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([43003, 43004, 43005,  ..., 49136, 49137, 49138], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1449)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([49140, 49141, 49142, 49143, 49144, 49145, 49146, 49147, 49148, 49149],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([49140, 49141, 49142,  ..., 55295, 55296, 55297], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1445)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([55298, 55299, 55300, 55301, 55302, 55303, 55304, 55305, 55306, 55307],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([55298, 55299, 55300,  ..., 61438, 61439, 61440], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1434)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([61441, 61442, 61443, 61444, 61445, 61446, 61447, 61448, 61449, 61450],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([61441, 61442, 61443,  ..., 67586, 67587, 67588], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1450)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([67589, 67590, 67591, 67592, 67593, 67594, 67596, 67597, 67598, 67599],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([67589, 67590, 67591,  ..., 73734, 73735, 73736], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1453)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([73737, 73738, 73739, 73740, 73741, 73742, 73743, 73744, 73745, 73746],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([73737, 73738, 73739,  ..., 79873, 79874, 79875], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1439)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([79876, 79877, 79878, 79879, 79880, 79881, 79882, 79883, 79884, 79885],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([79876, 79877, 79878,  ..., 86012, 86013, 86014], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1441)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([86015, 86016, 86017, 86018, 86019, 86020, 86021, 86022, 86023, 86024],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([86015, 86016, 86017,  ..., 92158, 92159, 92160], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1472)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([92161, 92162, 92163, 92164, 92165, 92166, 92167, 92168, 92169, 92170],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([92161, 92162, 92163,  ..., 98307, 98308, 98309], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1432)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([98310, 98311, 98312, 98313, 98314, 98315, 98316, 98317, 98318, 98319],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([ 98310,  98311,  98312,  ..., 104463, 104464, 104465], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1450)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([104466, 104467, 104468, 104469, 104470, 104471, 104472, 104473, 104474,
        104475], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([104466, 104467, 104468,  ..., 110591, 110592, 110593], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1462)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([110594, 110595, 110596, 110597, 110598, 110599, 110600, 110601, 110602,
        110603], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([110594, 110595, 110596,  ..., 116721, 116722, 116723], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1442)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([116724, 116725, 116726, 116727, 116728, 116729, 116730, 116731, 116732,
        116733], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([116724, 116725, 116726,  ..., 122857, 122858, 122859], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1467)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([122860, 122861, 122862, 122863, 122864, 122865, 122866, 122867, 122868,
        122869], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([122860, 122861, 122862,  ..., 129008, 129009, 129010], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1460)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([129011, 129012, 129013, 129014, 129015, 129016, 129017, 129019, 129020,
        129021], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([129011, 129012, 129013,  ..., 135143, 135144, 135145], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1432)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([135146, 135147, 135148, 135149, 135150, 135151, 135152, 135153, 135154,
        135155], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([135146, 135147, 135148,  ..., 141294, 141295, 141296], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1436)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([141297, 141298, 141299, 141300, 141301, 141302, 141303, 141304, 141305,
        141306], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([141297, 141298, 141299,  ..., 147445, 147446, 147447], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1437)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([147448, 147449, 147450, 147451, 147452, 147453, 147454, 147455, 147456,
        147457], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([147448, 147449, 147450,  ..., 153585, 153586, 153587], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1450)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([153588, 153589, 153590, 153591, 153593, 153594, 153595, 153596, 153597,
        153598], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([153588, 153589, 153590,  ..., 159741, 159742, 159743], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1445)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([159744, 159745, 159746, 159747, 159748, 159749, 159750, 159751, 159752,
        159753], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([159744, 159745, 159746,  ..., 165882, 165883, 165884], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1446)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([165885, 165886, 165887, 165888, 165889, 165890, 165891, 165892, 165893,
        165894], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([165885, 165886, 165887,  ..., 172009, 172010, 172011], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1457)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([172012, 172013, 172014, 172015, 172016, 172017, 172018, 172019, 172020,
        172021], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([172012, 172013, 172014,  ..., 178166, 178167, 178168], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1459)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([178169, 178170, 178171, 178172, 178173, 178174, 178175, 178176, 178177,
        178178], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([178169, 178170, 178171,  ..., 184329, 184330, 184331], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1417)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([184332, 184333, 184334, 184335, 184336, 184337, 184338, 184339, 184340,
        184341], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([184332, 184333, 184334,  ..., 190467, 190468, 190469], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8067278861999512  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1446)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555331230163574  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([190470, 190471, 190472, 190473, 190474, 190475, 190476, 190477, 190478,
        190479], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555326461791992  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([190470, 190471, 190472,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.804997444152832  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1445)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3551936149597168  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.6336)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3551936149597168  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes


 Run 0| Epoch 1 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555124282836914  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6137, 6138, 6139], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8063817024230957  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1416)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

v3.py : output nodes local nid:  tensor([6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6149],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5781135559082031  GigaBytes

core.py bucket local nid tensor([ 6140,  6141,  6142,  ..., 12300, 12301, 12302], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1445)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([12303, 12304, 12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([12303, 12304, 12305,  ..., 18432, 18433, 18434], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1427)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([18435, 18436, 18437, 18438, 18439, 18440, 18441, 18442, 18443, 18444],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([18435, 18436, 18437,  ..., 24573, 24574, 24575], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1433)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([24577, 24578, 24579, 24580, 24581, 24582, 24583, 24584, 24586, 24587],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([24577, 24578, 24579,  ..., 30721, 30722, 30723], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1435)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([30724, 30725, 30726, 30727, 30728, 30729, 30730, 30731, 30732, 30733],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([30724, 30725, 30726,  ..., 36873, 36874, 36875], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1424)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([36876, 36877, 36878, 36879, 36880, 36881, 36882, 36883, 36884, 36885],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([36876, 36877, 36878,  ..., 43019, 43020, 43021], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1416)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([43022, 43023, 43024, 43025, 43026, 43027, 43028, 43029, 43030, 43031],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([43022, 43023, 43024,  ..., 49157, 49158, 49159], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1429)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([49160, 49161, 49162, 49163, 49164, 49165, 49166, 49167, 49168, 49169],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([49160, 49161, 49162,  ..., 55284, 55285, 55286], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1420)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([55287, 55288, 55289, 55290, 55291, 55292, 55293, 55294, 55295, 55296],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([55287, 55288, 55289,  ..., 61421, 61422, 61423], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1414)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([61424, 61425, 61426, 61427, 61428, 61431, 61432, 61433, 61434, 61435],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([61424, 61425, 61426,  ..., 67558, 67559, 67560], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1432)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([67561, 67562, 67563, 67564, 67565, 67566, 67567, 67568, 67569, 67570],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([67561, 67562, 67563,  ..., 73696, 73697, 73698], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1422)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([73699, 73700, 73701, 73702, 73703, 73704, 73705, 73706, 73707, 73708],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([73699, 73700, 73701,  ..., 79865, 79866, 79867], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1427)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([79868, 79869, 79870, 79871, 79872, 79873, 79874, 79875, 79876, 79877],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([79868, 79869, 79870,  ..., 86009, 86010, 86011], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1482)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([86012, 86013, 86014, 86015, 86016, 86017, 86018, 86019, 86020, 86021],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([86012, 86013, 86014,  ..., 92149, 92150, 92151], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1429)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([92152, 92153, 92154, 92155, 92157, 92158, 92159, 92160, 92162, 92163],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([92152, 92153, 92154,  ..., 98321, 98322, 98323], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1414)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([98325, 98326, 98327, 98328, 98329, 98330, 98331, 98332, 98333, 98334],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 98325,  98326,  98327,  ..., 104465, 104466, 104467], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1441)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([104468, 104469, 104471, 104472, 104473, 104474, 104475, 104476, 104477,
        104478], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([104468, 104469, 104471,  ..., 110599, 110600, 110601], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1424)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([110602, 110603, 110604, 110605, 110606, 110607, 110608, 110609, 110610,
        110611], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([110602, 110603, 110604,  ..., 116761, 116762, 116763], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1422)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([116764, 116765, 116766, 116767, 116768, 116769, 116770, 116771, 116772,
        116773], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([116764, 116765, 116766,  ..., 122917, 122918, 122919], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1421)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([122920, 122921, 122922, 122923, 122924, 122925, 122926, 122927, 122928,
        122929], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([122920, 122921, 122922,  ..., 129046, 129047, 129048], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1451)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([129049, 129050, 129051, 129052, 129053, 129054, 129055, 129056, 129057,
        129058], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([129049, 129050, 129051,  ..., 135193, 135194, 135195], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1421)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([135196, 135197, 135198, 135199, 135200, 135201, 135202, 135203, 135204,
        135205], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([135196, 135197, 135198,  ..., 141327, 141328, 141329], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1429)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([141330, 141331, 141332, 141333, 141334, 141335, 141336, 141337, 141338,
        141339], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([141330, 141331, 141332,  ..., 147470, 147471, 147472], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1416)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([147473, 147474, 147475, 147476, 147477, 147478, 147479, 147480, 147481,
        147482], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([147473, 147474, 147475,  ..., 153611, 153612, 153613], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1417)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([153614, 153615, 153616, 153617, 153618, 153619, 153620, 153621, 153622,
        153623], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([153614, 153615, 153616,  ..., 159739, 159740, 159741], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1422)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([159742, 159743, 159744, 159745, 159746, 159747, 159749, 159750, 159751,
        159752], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([159742, 159743, 159744,  ..., 165887, 165888, 165889], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1412)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([165890, 165891, 165892, 165893, 165894, 165895, 165896, 165897, 165898,
        165899], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([165890, 165891, 165892,  ..., 172017, 172018, 172019], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1459)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([172020, 172021, 172022, 172023, 172024, 172025, 172026, 172027, 172028,
        172029], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([172020, 172021, 172022,  ..., 178169, 178170, 178171], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1429)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([178172, 178173, 178174, 178175, 178176, 178177, 178178, 178179, 178180,
        178181], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([178172, 178173, 178174,  ..., 184325, 184326, 184327], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1441)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([184328, 184329, 184330, 184331, 184332, 184333, 184334, 184335, 184336,
        184337], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([184328, 184329, 184330,  ..., 190463, 190464, 190465], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1424)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([190466, 190467, 190468, 190469, 190470, 190471, 190472, 190473, 190474,
        190475], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35588979721069336  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([190466, 190467, 190468,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8053545951843262  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1409)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.5703)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes


 Run 0| Epoch 2 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35500049591064453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6143, 6144, 6145], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8058309555053711  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1408)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154, 6155],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 6146,  6147,  6148,  ..., 12288, 12289, 12290], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1394)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([12291, 12292, 12293, 12294, 12295, 12296, 12297, 12298, 12299, 12300],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([12291, 12292, 12293,  ..., 18434, 18435, 18436], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1398)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([18437, 18438, 18439, 18440, 18441, 18442, 18443, 18444, 18445, 18446],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([18437, 18438, 18439,  ..., 24587, 24588, 24589], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1421)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([24590, 24591, 24592, 24593, 24594, 24595, 24596, 24597, 24598, 24599],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([24590, 24591, 24592,  ..., 30723, 30724, 30725], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1399)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([30726, 30727, 30728, 30729, 30730, 30731, 30732, 30733, 30734, 30735],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([30726, 30727, 30728,  ..., 36886, 36887, 36888], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1414)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([36889, 36890, 36891, 36892, 36893, 36894, 36895, 36896, 36897, 36898],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([36889, 36890, 36891,  ..., 43058, 43059, 43060], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1412)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([43061, 43062, 43063, 43064, 43065, 43066, 43067, 43068, 43069, 43070],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([43061, 43062, 43063,  ..., 49199, 49200, 49201], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1391)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([49202, 49203, 49204, 49205, 49206, 49207, 49208, 49209, 49210, 49211],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([49202, 49203, 49204,  ..., 55327, 55328, 55329], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1411)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([55330, 55331, 55332, 55333, 55334, 55335, 55336, 55337, 55338, 55339],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([55330, 55331, 55332,  ..., 61468, 61471, 61472], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1413)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([61473, 61474, 61475, 61476, 61477, 61478, 61479, 61480, 61481, 61482],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([61473, 61474, 61475,  ..., 67622, 67623, 67625], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1412)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([67626, 67628, 67629, 67630, 67631, 67632, 67633, 67634, 67635, 67636],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([67626, 67628, 67629,  ..., 73773, 73774, 73775], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1404)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([73776, 73777, 73778, 73779, 73780, 73781, 73782, 73783, 73784, 73785],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([73776, 73777, 73778,  ..., 79921, 79922, 79923], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1407)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([79924, 79925, 79926, 79927, 79928, 79929, 79930, 79931, 79932, 79933],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([79924, 79925, 79926,  ..., 86055, 86056, 86057], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1415)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([86058, 86059, 86060, 86061, 86062, 86063, 86064, 86065, 86066, 86067],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([86058, 86059, 86060,  ..., 92187, 92188, 92189], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1390)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([92190, 92191, 92192, 92193, 92194, 92195, 92196, 92197, 92198, 92199],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([92190, 92191, 92192,  ..., 98318, 98319, 98320], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1432)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([98322, 98323, 98324, 98326, 98327, 98328, 98329, 98330, 98331, 98332],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 98322,  98323,  98324,  ..., 104479, 104480, 104481], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1412)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([104482, 104483, 104484, 104485, 104486, 104487, 104488, 104489, 104490,
        104491], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([104482, 104483, 104484,  ..., 110626, 110627, 110628], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1391)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([110629, 110630, 110631, 110632, 110633, 110634, 110635, 110636, 110637,
        110638], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([110629, 110630, 110631,  ..., 116772, 116773, 116774], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1402)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([116775, 116776, 116777, 116778, 116779, 116780, 116781, 116782, 116783,
        116784], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([116775, 116776, 116777,  ..., 122915, 122916, 122917], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1395)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([122918, 122919, 122920, 122922, 122923, 122924, 122925, 122926, 122927,
        122928], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([122918, 122919, 122920,  ..., 129079, 129080, 129081], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1402)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([129082, 129083, 129084, 129085, 129087, 129088, 129089, 129090, 129091,
        129092], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([129082, 129083, 129084,  ..., 135223, 135224, 135225], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1394)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([135226, 135227, 135228, 135229, 135230, 135231, 135232, 135233, 135234,
        135235], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([135226, 135227, 135228,  ..., 141346, 141347, 141348], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1412)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([141349, 141350, 141351, 141352, 141353, 141354, 141355, 141356, 141357,
        141358], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([141349, 141350, 141351,  ..., 147461, 147462, 147463], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1413)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([147464, 147465, 147467, 147468, 147469, 147470, 147471, 147472, 147473,
        147474], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([147464, 147465, 147467,  ..., 153590, 153591, 153592], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1407)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([153593, 153594, 153595, 153596, 153597, 153598, 153599, 153600, 153601,
        153602], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([153593, 153594, 153595,  ..., 159741, 159742, 159743], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1397)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([159744, 159745, 159747, 159748, 159749, 159750, 159751, 159752, 159753,
        159754], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([159744, 159745, 159747,  ..., 165886, 165887, 165888], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1433)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([165889, 165890, 165891, 165892, 165893, 165894, 165896, 165897, 165898,
        165899], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([165889, 165890, 165891,  ..., 172037, 172038, 172039], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1413)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([172040, 172041, 172042, 172043, 172044, 172045, 172046, 172047, 172049,
        172050], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([172040, 172041, 172042,  ..., 178183, 178184, 178185], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1430)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([178186, 178188, 178189, 178190, 178191, 178192, 178193, 178194, 178195,
        178196], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([178186, 178188, 178189,  ..., 184313, 184314, 184315], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1441)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([184316, 184317, 184318, 184319, 184320, 184321, 184322, 184323, 184324,
        184325], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([184316, 184317, 184318,  ..., 190478, 190479, 190480], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8065342903137207  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1418)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533952713012695  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([190481, 190482, 190483, 190484, 190485, 190486, 190487, 190488, 190489,
        190490], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35533905029296875  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([190481, 190482, 190483,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8048038482666016  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1397)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35500001907348633  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.5078)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35500001907348633  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes


 Run 0| Epoch 3 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555124282836914  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6129, 6130, 6131], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8063817024230957  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1385)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([6132, 6133, 6134, 6136, 6137, 6138, 6139, 6140, 6141, 6142],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 6132,  6133,  6134,  ..., 12285, 12286, 12287], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1394)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([12288, 12289, 12290, 12291, 12292, 12293, 12294, 12295, 12296, 12297],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([12288, 12289, 12290,  ..., 18429, 18430, 18431], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1376)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([18432, 18433, 18434, 18435, 18436, 18437, 18438, 18439, 18440, 18441],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([18432, 18433, 18434,  ..., 24575, 24576, 24577], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1380)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([24578, 24579, 24580, 24581, 24582, 24583, 24584, 24585, 24586, 24587],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([24578, 24579, 24580,  ..., 30718, 30719, 30720], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1388)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([30721, 30722, 30724, 30725, 30726, 30727, 30728, 30729, 30730, 30731],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([30721, 30722, 30724,  ..., 36855, 36856, 36857], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1402)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([36858, 36859, 36860, 36861, 36862, 36863, 36864, 36865, 36866, 36867],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([36858, 36859, 36860,  ..., 42993, 42994, 42995], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1376)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([42996, 42997, 42998, 42999, 43000, 43001, 43002, 43003, 43004, 43005],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([42996, 42997, 42998,  ..., 49126, 49127, 49128], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1396)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([49129, 49130, 49131, 49132, 49133, 49134, 49135, 49136, 49137, 49138],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([49129, 49130, 49131,  ..., 55262, 55263, 55264], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1377)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([55265, 55266, 55267, 55268, 55269, 55270, 55271, 55272, 55273, 55274],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([55265, 55266, 55267,  ..., 61398, 61399, 61400], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1383)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([61401, 61402, 61403, 61404, 61405, 61406, 61407, 61408, 61409, 61410],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([61401, 61402, 61403,  ..., 67546, 67547, 67548], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1398)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([67549, 67550, 67551, 67552, 67553, 67554, 67555, 67556, 67557, 67558],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([67549, 67550, 67551,  ..., 73693, 73694, 73695], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1401)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([73696, 73697, 73698, 73699, 73700, 73701, 73702, 73703, 73705, 73706],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([73696, 73697, 73698,  ..., 79841, 79842, 79843], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1437)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([79844, 79845, 79846, 79847, 79848, 79849, 79850, 79851, 79852, 79853],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([79844, 79845, 79846,  ..., 86020, 86021, 86022], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1388)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([86023, 86024, 86025, 86026, 86027, 86028, 86029, 86030, 86031, 86032],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([86023, 86024, 86025,  ..., 92164, 92165, 92166], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1376)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([92167, 92168, 92169, 92170, 92171, 92172, 92173, 92174, 92175, 92176],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([92167, 92168, 92169,  ..., 98308, 98309, 98310], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1386)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([98311, 98312, 98313, 98314, 98315, 98316, 98317, 98318, 98319, 98320],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 98311,  98312,  98313,  ..., 104447, 104448, 104449], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1378)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([104450, 104451, 104452, 104453, 104454, 104455, 104456, 104457, 104458,
        104459], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([104450, 104451, 104452,  ..., 110581, 110582, 110583], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1374)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([110584, 110585, 110586, 110587, 110588, 110589, 110590, 110591, 110592,
        110593], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([110584, 110585, 110586,  ..., 116736, 116737, 116738], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1390)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([116739, 116740, 116741, 116742, 116743, 116744, 116745, 116746, 116747,
        116748], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([116739, 116740, 116741,  ..., 122888, 122889, 122890], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1384)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([122891, 122892, 122893, 122894, 122895, 122896, 122897, 122898, 122899,
        122900], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([122891, 122892, 122893,  ..., 129046, 129047, 129048], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1390)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([129049, 129050, 129051, 129052, 129053, 129054, 129055, 129056, 129057,
        129058], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([129049, 129050, 129051,  ..., 135188, 135189, 135190], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1374)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([135192, 135193, 135194, 135195, 135196, 135197, 135198, 135199, 135200,
        135201], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([135192, 135193, 135194,  ..., 141330, 141331, 141333], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1401)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([141334, 141335, 141336, 141337, 141338, 141339, 141340, 141341, 141342,
        141343], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([141334, 141335, 141336,  ..., 147461, 147462, 147463], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1383)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([147464, 147465, 147466, 147467, 147468, 147469, 147470, 147471, 147472,
        147473], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([147464, 147465, 147466,  ..., 153590, 153591, 153592], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1395)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([153593, 153594, 153595, 153596, 153597, 153598, 153599, 153600, 153601,
        153602], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([153593, 153594, 153595,  ..., 159735, 159736, 159737], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1383)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([159738, 159739, 159740, 159741, 159742, 159743, 159744, 159745, 159746,
        159747], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([159738, 159739, 159740,  ..., 165872, 165873, 165874], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1433)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([165875, 165876, 165877, 165878, 165879, 165880, 165881, 165882, 165883,
        165884], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([165875, 165876, 165877,  ..., 172009, 172010, 172011], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1390)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([172012, 172013, 172014, 172015, 172016, 172017, 172018, 172019, 172020,
        172021], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([172012, 172013, 172014,  ..., 178157, 178158, 178159], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1380)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([178160, 178161, 178162, 178163, 178165, 178166, 178167, 178168, 178169,
        178170], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([178160, 178161, 178162,  ..., 184310, 184311, 184312], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1379)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([184313, 184314, 184315, 184316, 184317, 184318, 184319, 184320, 184321,
        184322], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([184313, 184314, 184315,  ..., 190452, 190453, 190454], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1380)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([190455, 190456, 190457, 190458, 190459, 190460, 190461, 190462, 190463,
        190464], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35588979721069336  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([190455, 190456, 190457,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8053545951843262  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1388)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.4446)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes


 Run 0| Epoch 4 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3551616668701172  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6122, 6123, 6124], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8059921264648438  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1387)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 6125,  6126,  6127,  ..., 12263, 12264, 12265], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1364)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([12266, 12267, 12268, 12269, 12270, 12271, 12272, 12273, 12274, 12275],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([12266, 12267, 12268,  ..., 18402, 18403, 18404], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1372)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([18405, 18406, 18407, 18408, 18409, 18410, 18411, 18412, 18413, 18414],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([18405, 18406, 18407,  ..., 24531, 24532, 24533], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1383)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([24534, 24535, 24536, 24537, 24538, 24539, 24540, 24541, 24542, 24543],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([24534, 24535, 24536,  ..., 30678, 30679, 30680], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1361)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([30681, 30682, 30683, 30684, 30685, 30686, 30687, 30688, 30689, 30690],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([30681, 30682, 30683,  ..., 36855, 36856, 36857], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1366)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([36858, 36859, 36860, 36861, 36862, 36863, 36864, 36865, 36866, 36867],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([36858, 36859, 36860,  ..., 43004, 43005, 43006], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1368)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([43007, 43008, 43009, 43010, 43011, 43012, 43013, 43014, 43015, 43016],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([43007, 43008, 43009,  ..., 49153, 49154, 49155], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1383)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([49156, 49157, 49158, 49159, 49160, 49161, 49162, 49163, 49164, 49165],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([49156, 49157, 49158,  ..., 55301, 55302, 55303], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1388)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([55304, 55305, 55306, 55307, 55308, 55309, 55310, 55311, 55312, 55313],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([55304, 55305, 55306,  ..., 61431, 61432, 61433], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1360)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([61434, 61435, 61436, 61437, 61438, 61439, 61440, 61441, 61442, 61443],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([61434, 61435, 61436,  ..., 67583, 67584, 67585], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1353)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([67586, 67587, 67588, 67589, 67590, 67591, 67592, 67593, 67594, 67595],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([67586, 67587, 67588,  ..., 73746, 73747, 73748], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1359)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([73749, 73750, 73751, 73752, 73753, 73754, 73755, 73756, 73757, 73758],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([73749, 73750, 73751,  ..., 79880, 79881, 79882], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1387)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([79883, 79884, 79886, 79887, 79888, 79889, 79890, 79891, 79892, 79893],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([79883, 79884, 79886,  ..., 86021, 86022, 86024], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1366)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([86025, 86026, 86027, 86028, 86029, 86030, 86031, 86032, 86033, 86034],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([86025, 86026, 86027,  ..., 92159, 92160, 92161], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1355)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([92162, 92163, 92164, 92165, 92167, 92168, 92169, 92170, 92171, 92172],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([92162, 92163, 92164,  ..., 98308, 98309, 98310], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1385)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([98312, 98313, 98315, 98316, 98317, 98318, 98319, 98320, 98321, 98322],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 98312,  98313,  98315,  ..., 104455, 104456, 104457], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1354)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([104458, 104459, 104460, 104461, 104462, 104463, 104464, 104465, 104466,
        104467], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([104458, 104459, 104460,  ..., 110609, 110610, 110611], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1357)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([110612, 110613, 110614, 110615, 110616, 110617, 110618, 110619, 110620,
        110621], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([110612, 110613, 110614,  ..., 116750, 116751, 116752], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1381)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([116753, 116754, 116755, 116756, 116757, 116758, 116759, 116760, 116761,
        116762], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([116753, 116754, 116755,  ..., 122882, 122883, 122884], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1367)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([122885, 122886, 122887, 122888, 122889, 122890, 122891, 122893, 122894,
        122895], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([122885, 122886, 122887,  ..., 129012, 129013, 129014], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1379)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([129015, 129016, 129017, 129018, 129019, 129020, 129021, 129022, 129023,
        129025], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([129015, 129016, 129017,  ..., 135156, 135157, 135158], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1370)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([135159, 135160, 135161, 135162, 135163, 135164, 135165, 135166, 135167,
        135168], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([135159, 135160, 135161,  ..., 141286, 141288, 141289], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1358)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([141290, 141291, 141292, 141293, 141294, 141295, 141296, 141297, 141298,
        141299], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([141290, 141291, 141292,  ..., 147432, 147433, 147434], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1371)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([147435, 147436, 147437, 147438, 147439, 147440, 147441, 147442, 147443,
        147444], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([147435, 147436, 147437,  ..., 153558, 153559, 153560], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1380)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([153561, 153562, 153563, 153564, 153565, 153566, 153567, 153568, 153569,
        153570], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([153561, 153562, 153563,  ..., 159714, 159715, 159716], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1376)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([159717, 159718, 159719, 159720, 159721, 159722, 159723, 159724, 159725,
        159726], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([159717, 159718, 159719,  ..., 165835, 165837, 165838], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1353)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([165839, 165840, 165841, 165842, 165843, 165844, 165845, 165846, 165847,
        165848], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([165839, 165840, 165841,  ..., 171976, 171977, 171978], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1370)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([171979, 171980, 171981, 171982, 171983, 171984, 171985, 171986, 171987,
        171988], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([171979, 171980, 171981,  ..., 178114, 178115, 178116], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1377)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([178117, 178118, 178120, 178121, 178122, 178123, 178124, 178125, 178126,
        178127], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([178117, 178118, 178120,  ..., 184270, 184271, 184272], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1346)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([184273, 184274, 184275, 184276, 184277, 184278, 184279, 184280, 184281,
        184282], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([184273, 184274, 184275,  ..., 190447, 190448, 190449], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8066954612731934  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1376)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555006980895996  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([190450, 190451, 190452, 190453, 190454, 190455, 190456, 190457, 190458,
        190459], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.3555002212524414  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([190450, 190451, 190452,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8049650192260742  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1358)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.355161190032959  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.3810)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.355161190032959  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes


 Run 0| Epoch 5 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555124282836914  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6129, 6130, 6131], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8063817024230957  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1339)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 6132,  6133,  6134,  ..., 12261, 12262, 12263], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1363)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([12264, 12265, 12266, 12267, 12268, 12269, 12270, 12271, 12272, 12273],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([12264, 12265, 12266,  ..., 18402, 18403, 18404], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1343)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([18405, 18406, 18407, 18408, 18409, 18410, 18411, 18412, 18413, 18414],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([18405, 18406, 18407,  ..., 24550, 24551, 24552], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1333)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([24553, 24555, 24556, 24557, 24558, 24559, 24560, 24561, 24562, 24563],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([24553, 24555, 24556,  ..., 30684, 30685, 30686], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1358)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([30687, 30688, 30689, 30690, 30691, 30692, 30693, 30694, 30695, 30696],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([30687, 30688, 30689,  ..., 36828, 36829, 36830], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1353)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([36831, 36832, 36833, 36834, 36835, 36836, 36837, 36838, 36839, 36840],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([36831, 36832, 36833,  ..., 42975, 42976, 42977], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1345)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([42978, 42979, 42980, 42981, 42982, 42983, 42984, 42985, 42986, 42987],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([42978, 42979, 42980,  ..., 49111, 49112, 49113], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1351)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([49114, 49115, 49116, 49117, 49118, 49119, 49120, 49121, 49123, 49124],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([49114, 49115, 49116,  ..., 55253, 55254, 55255], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1351)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([55256, 55257, 55258, 55259, 55260, 55261, 55262, 55263, 55264, 55265],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([55256, 55257, 55258,  ..., 61377, 61378, 61379], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1345)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([61380, 61381, 61382, 61383, 61384, 61385, 61386, 61387, 61388, 61389],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([61380, 61381, 61382,  ..., 67521, 67522, 67523], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1343)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([67524, 67525, 67526, 67527, 67528, 67529, 67530, 67531, 67532, 67533],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([67524, 67525, 67526,  ..., 73673, 73674, 73675], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1343)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([73676, 73677, 73678, 73679, 73680, 73681, 73682, 73683, 73684, 73685],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([73676, 73677, 73678,  ..., 79819, 79820, 79821], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1336)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([79822, 79823, 79824, 79825, 79826, 79827, 79828, 79829, 79830, 79831],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([79822, 79823, 79824,  ..., 85962, 85963, 85964], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1351)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([85965, 85966, 85967, 85968, 85969, 85970, 85971, 85972, 85973, 85974],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([85965, 85966, 85967,  ..., 92101, 92102, 92103], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1348)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([92104, 92105, 92106, 92107, 92108, 92109, 92110, 92111, 92112, 92113],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([92104, 92105, 92106,  ..., 98248, 98249, 98250], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1348)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([98251, 98252, 98253, 98254, 98255, 98256, 98257, 98258, 98259, 98260],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 98251,  98252,  98253,  ..., 104416, 104417, 104418], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1344)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([104419, 104420, 104421, 104422, 104423, 104424, 104425, 104426, 104427,
        104428], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([104419, 104420, 104421,  ..., 110569, 110570, 110571], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1352)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([110572, 110573, 110574, 110575, 110576, 110577, 110578, 110579, 110580,
        110582], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([110572, 110573, 110574,  ..., 116717, 116718, 116719], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1370)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([116720, 116721, 116722, 116723, 116724, 116725, 116726, 116727, 116728,
        116729], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([116720, 116721, 116722,  ..., 122857, 122858, 122859], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1356)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([122860, 122861, 122862, 122863, 122864, 122865, 122866, 122867, 122868,
        122869], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([122860, 122861, 122862,  ..., 129024, 129025, 129026], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1353)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([129027, 129028, 129029, 129030, 129031, 129032, 129033, 129034, 129035,
        129036], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([129027, 129028, 129029,  ..., 135169, 135170, 135171], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1349)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([135172, 135173, 135174, 135175, 135176, 135177, 135178, 135179, 135180,
        135181], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([135172, 135173, 135174,  ..., 141319, 141320, 141321], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1352)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([141322, 141323, 141324, 141325, 141326, 141327, 141328, 141329, 141330,
        141331], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([141322, 141323, 141324,  ..., 147477, 147478, 147479], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1339)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([147480, 147481, 147482, 147483, 147484, 147485, 147486, 147487, 147488,
        147489], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([147480, 147481, 147482,  ..., 153626, 153627, 153628], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1369)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([153629, 153630, 153631, 153632, 153633, 153634, 153635, 153636, 153637,
        153638], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([153629, 153630, 153631,  ..., 159762, 159763, 159764], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1362)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([159765, 159766, 159767, 159768, 159769, 159770, 159771, 159772, 159773,
        159774], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([159765, 159766, 159767,  ..., 165907, 165909, 165910], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1340)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([165911, 165912, 165913, 165914, 165915, 165916, 165917, 165918, 165919,
        165920], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([165911, 165912, 165913,  ..., 172068, 172069, 172070], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1323)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([172071, 172072, 172073, 172074, 172075, 172076, 172077, 172078, 172079,
        172080], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([172071, 172072, 172073,  ..., 178193, 178194, 178195], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1371)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([178196, 178197, 178198, 178199, 178200, 178201, 178202, 178203, 178204,
        178205], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([178196, 178197, 178198,  ..., 184336, 184337, 184339], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1335)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([184340, 184341, 184342, 184343, 184344, 184345, 184346, 184347, 184348,
        184349], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([184340, 184341, 184342,  ..., 190474, 190475, 190476], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1362)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([190477, 190478, 190479, 190480, 190481, 190482, 190483, 190484, 190485,
        190486], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35588979721069336  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([190477, 190478, 190479,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8053545951843262  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1337)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.3164)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes


 Run 0| Epoch 6 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35475826263427734  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6140, 6141, 6142], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8055887222290039  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1334)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([6143, 6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 6143,  6144,  6145,  ..., 12274, 12275, 12276], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1328)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([12277, 12278, 12279, 12280, 12281, 12282, 12283, 12284, 12285, 12286],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([12277, 12278, 12279,  ..., 18428, 18429, 18430], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1335)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([18431, 18432, 18433, 18434, 18435, 18437, 18438, 18439, 18440, 18441],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([18431, 18432, 18433,  ..., 24573, 24574, 24575], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1321)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([24576, 24577, 24578, 24579, 24580, 24581, 24582, 24583, 24584, 24585],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([24576, 24577, 24578,  ..., 30679, 30680, 30681], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1321)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([30682, 30683, 30684, 30685, 30686, 30687, 30688, 30689, 30690, 30691],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([30682, 30683, 30684,  ..., 36807, 36808, 36809], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1330)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([36810, 36811, 36812, 36813, 36814, 36815, 36816, 36817, 36818, 36819],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([36810, 36811, 36812,  ..., 42945, 42946, 42947], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1334)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([42948, 42949, 42950, 42951, 42952, 42953, 42954, 42955, 42956, 42957],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([42948, 42949, 42950,  ..., 49095, 49096, 49097], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1322)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([49098, 49099, 49100, 49101, 49102, 49103, 49104, 49105, 49106, 49107],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([49098, 49099, 49100,  ..., 55239, 55240, 55241], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1329)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([55242, 55243, 55244, 55245, 55246, 55247, 55248, 55249, 55250, 55251],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([55242, 55243, 55244,  ..., 61376, 61377, 61379], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1352)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([61380, 61381, 61383, 61384, 61385, 61387, 61388, 61389, 61390, 61391],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([61380, 61381, 61383,  ..., 67538, 67539, 67540], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1335)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([67541, 67542, 67543, 67544, 67545, 67546, 67547, 67548, 67549, 67550],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([67541, 67542, 67543,  ..., 73665, 73666, 73667], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1335)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([73668, 73669, 73670, 73671, 73672, 73673, 73674, 73675, 73676, 73677],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([73668, 73669, 73670,  ..., 79807, 79808, 79809], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1319)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([79810, 79811, 79812, 79813, 79814, 79815, 79816, 79817, 79818, 79819],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([79810, 79811, 79812,  ..., 85967, 85968, 85969], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1314)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([85970, 85971, 85972, 85973, 85974, 85975, 85976, 85977, 85978, 85979],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([85970, 85971, 85972,  ..., 92124, 92125, 92126], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1327)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([92127, 92128, 92129, 92130, 92131, 92132, 92133, 92134, 92135, 92136],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([92127, 92128, 92129,  ..., 98270, 98271, 98272], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1305)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([98273, 98274, 98275, 98276, 98277, 98278, 98279, 98280, 98281, 98282],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 98273,  98274,  98275,  ..., 104432, 104433, 104434], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1313)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([104435, 104436, 104437, 104438, 104439, 104440, 104441, 104442, 104443,
        104444], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([104435, 104436, 104437,  ..., 110583, 110584, 110585], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1333)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([110586, 110587, 110589, 110590, 110591, 110592, 110593, 110594, 110595,
        110596], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([110586, 110587, 110589,  ..., 116733, 116734, 116735], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1317)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([116736, 116737, 116738, 116739, 116740, 116741, 116742, 116743, 116744,
        116745], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([116736, 116737, 116738,  ..., 122883, 122884, 122885], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1340)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([122886, 122887, 122888, 122889, 122890, 122891, 122892, 122893, 122894,
        122895], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([122886, 122887, 122888,  ..., 129021, 129022, 129023], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1329)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([129024, 129025, 129026, 129027, 129028, 129029, 129030, 129031, 129032,
        129033], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([129024, 129025, 129026,  ..., 135172, 135173, 135174], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1337)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([135175, 135176, 135177, 135178, 135180, 135181, 135182, 135183, 135184,
        135185], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([135175, 135176, 135177,  ..., 141314, 141315, 141316], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1310)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([141317, 141318, 141319, 141320, 141321, 141322, 141323, 141324, 141325,
        141326], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([141317, 141318, 141319,  ..., 147433, 147434, 147435], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1333)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([147436, 147437, 147438, 147439, 147440, 147441, 147442, 147444, 147445,
        147446], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([147436, 147437, 147438,  ..., 153586, 153587, 153588], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1322)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([153589, 153590, 153591, 153592, 153593, 153594, 153595, 153596, 153597,
        153598], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([153589, 153590, 153591,  ..., 159735, 159736, 159737], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1336)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([159738, 159739, 159740, 159741, 159742, 159743, 159744, 159745, 159746,
        159747], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([159738, 159739, 159740,  ..., 165869, 165870, 165871], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1317)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([165872, 165873, 165875, 165876, 165877, 165878, 165879, 165880, 165881,
        165882], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([165872, 165873, 165875,  ..., 172014, 172015, 172016], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1321)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([172017, 172018, 172020, 172021, 172022, 172023, 172024, 172025, 172026,
        172027], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([172017, 172018, 172020,  ..., 178157, 178158, 178159], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1321)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([178160, 178161, 178162, 178163, 178164, 178165, 178166, 178167, 178168,
        178169], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([178160, 178161, 178162,  ..., 184295, 184296, 184297], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1355)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([184298, 184299, 184300, 184301, 184302, 184303, 184304, 184305, 184306,
        184307], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([184298, 184299, 184300,  ..., 190455, 190456, 190457], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8062920570373535  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1348)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509729385375977  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([190458, 190459, 190460, 190461, 190462, 190463, 190464, 190466, 190467,
        190468], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35509681701660156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([190458, 190459, 190460,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8045616149902344  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1331)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35475778579711914  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.2505)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35475778579711914  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes


 Run 0| Epoch 7 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555124282836914  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6149, 6150, 6151], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8063817024230957  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1307)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([6152, 6153, 6154, 6155, 6156, 6157, 6158, 6160, 6161, 6162],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 6152,  6153,  6154,  ..., 12288, 12289, 12290], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1319)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([12291, 12292, 12293, 12294, 12295, 12296, 12297, 12298, 12299, 12300],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([12291, 12292, 12293,  ..., 18444, 18445, 18446], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1313)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([18447, 18448, 18449, 18450, 18451, 18452, 18453, 18454, 18455, 18456],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([18447, 18448, 18449,  ..., 24594, 24595, 24596], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1322)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([24597, 24598, 24599, 24600, 24601, 24602, 24603, 24604, 24605, 24606],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([24597, 24598, 24599,  ..., 30755, 30756, 30757], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1297)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([30758, 30759, 30760, 30761, 30762, 30763, 30764, 30765, 30766, 30767],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([30758, 30759, 30760,  ..., 36917, 36918, 36919], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1316)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([36920, 36921, 36922, 36923, 36924, 36926, 36927, 36928, 36929, 36930],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([36920, 36921, 36922,  ..., 43083, 43084, 43085], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1304)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([43086, 43087, 43088, 43089, 43090, 43091, 43092, 43093, 43094, 43095],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([43086, 43087, 43088,  ..., 49242, 49243, 49244], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1304)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([49245, 49246, 49247, 49248, 49249, 49250, 49251, 49252, 49253, 49254],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([49245, 49246, 49247,  ..., 55395, 55396, 55397], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1322)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([55398, 55399, 55400, 55402, 55403, 55404, 55405, 55406, 55407, 55408],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([55398, 55399, 55400,  ..., 61521, 61522, 61523], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1313)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([61524, 61525, 61526, 61527, 61528, 61530, 61531, 61532, 61533, 61534],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([61524, 61525, 61526,  ..., 67674, 67675, 67676], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1334)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([67677, 67678, 67679, 67680, 67681, 67682, 67683, 67684, 67685, 67686],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([67677, 67678, 67679,  ..., 73806, 73807, 73808], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1331)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([73809, 73810, 73811, 73812, 73813, 73814, 73815, 73816, 73817, 73818],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([73809, 73810, 73811,  ..., 79953, 79954, 79955], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1292)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([79956, 79957, 79958, 79959, 79960, 79961, 79962, 79963, 79964, 79965],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([79956, 79957, 79958,  ..., 86086, 86087, 86088], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1309)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([86089, 86090, 86091, 86093, 86094, 86095, 86096, 86097, 86098, 86099],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([86089, 86090, 86091,  ..., 92221, 92222, 92223], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1306)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([92224, 92225, 92226, 92227, 92228, 92229, 92230, 92231, 92232, 92233],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([92224, 92225, 92226,  ..., 98377, 98378, 98379], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1307)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([98380, 98381, 98382, 98383, 98384, 98385, 98386, 98387, 98388, 98389],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 98380,  98381,  98382,  ..., 104507, 104508, 104509], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1312)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([104510, 104511, 104512, 104513, 104514, 104515, 104516, 104517, 104518,
        104519], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([104510, 104511, 104512,  ..., 110666, 110667, 110668], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1294)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([110669, 110670, 110671, 110672, 110673, 110674, 110675, 110676, 110677,
        110678], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([110669, 110670, 110671,  ..., 116806, 116807, 116808], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1299)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([116809, 116810, 116811, 116812, 116813, 116814, 116815, 116816, 116817,
        116818], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([116809, 116810, 116811,  ..., 122938, 122939, 122940], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1301)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([122941, 122942, 122943, 122944, 122945, 122946, 122947, 122948, 122949,
        122950], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([122941, 122942, 122943,  ..., 129068, 129069, 129070], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1302)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([129071, 129072, 129073, 129074, 129075, 129076, 129077, 129078, 129079,
        129080], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([129071, 129072, 129073,  ..., 135185, 135186, 135187], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1294)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([135188, 135189, 135190, 135191, 135192, 135194, 135195, 135196, 135197,
        135198], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([135188, 135189, 135190,  ..., 141327, 141328, 141329], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1295)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([141330, 141331, 141332, 141333, 141334, 141335, 141336, 141337, 141338,
        141339], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([141330, 141331, 141332,  ..., 147456, 147457, 147458], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1294)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([147459, 147460, 147461, 147462, 147463, 147464, 147465, 147466, 147467,
        147468], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([147459, 147460, 147461,  ..., 153591, 153592, 153593], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1322)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([153594, 153595, 153596, 153597, 153598, 153599, 153600, 153601, 153602,
        153603], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([153594, 153595, 153596,  ..., 159745, 159746, 159747], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1304)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([159748, 159749, 159750, 159751, 159752, 159753, 159754, 159755, 159756,
        159757], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([159748, 159749, 159750,  ..., 165880, 165881, 165882], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1308)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([165883, 165884, 165885, 165886, 165887, 165888, 165889, 165890, 165891,
        165892], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([165883, 165884, 165885,  ..., 172029, 172030, 172031], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1296)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([172032, 172033, 172034, 172035, 172036, 172037, 172038, 172039, 172040,
        172041], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([172032, 172033, 172034,  ..., 178184, 178185, 178186], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1292)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([178187, 178188, 178189, 178190, 178191, 178192, 178193, 178194, 178195,
        178196], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([178187, 178188, 178189,  ..., 184321, 184322, 184323], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1298)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([184324, 184325, 184326, 184327, 184328, 184329, 184330, 184331, 184332,
        184333], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([184324, 184325, 184326,  ..., 190461, 190462, 190463], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8070850372314453  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1327)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35589027404785156  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([190464, 190465, 190466, 190467, 190468, 190469, 190470, 190471, 190472,
        190473], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35588979721069336  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([190464, 190465, 190466,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8053545951843262  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1302)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.1837)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35555076599121094  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes


 Run 0| Epoch 8 |
{1: 173, 2: 221, 3: 374, 4: 456, 5: 445, 6: 550, 7: 655, 8: 512, 9: 576, 10: 192609}
v3.py : output nodes local nid:  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35532331466674805  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([   0,    1,    2,  ..., 6130, 6131, 6132], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8061537742614746  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1292)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 6133,  6134,  6135,  ..., 12276, 12277, 12278], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1281)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([12279, 12280, 12281, 12282, 12283, 12284, 12285, 12286, 12287, 12288],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([12279, 12280, 12281,  ..., 18416, 18417, 18418], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1274)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([18419, 18420, 18422, 18423, 18424, 18425, 18426, 18427, 18428, 18429],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([18419, 18420, 18422,  ..., 24569, 24570, 24571], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1268)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([24572, 24573, 24574, 24575, 24576, 24577, 24578, 24579, 24580, 24581],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([24572, 24573, 24574,  ..., 30702, 30703, 30704], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1287)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([30705, 30706, 30707, 30708, 30709, 30710, 30711, 30712, 30713, 30714],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([30705, 30706, 30707,  ..., 36836, 36837, 36838], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1296)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([36839, 36840, 36841, 36842, 36843, 36844, 36845, 36846, 36847, 36848],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([36839, 36840, 36841,  ..., 42972, 42973, 42974], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1281)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([42975, 42976, 42977, 42978, 42979, 42980, 42981, 42982, 42983, 42984],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([42975, 42976, 42977,  ..., 49120, 49121, 49122], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1302)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([49123, 49124, 49125, 49126, 49127, 49128, 49129, 49130, 49131, 49132],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([49123, 49124, 49125,  ..., 55264, 55265, 55266], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1292)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([55267, 55268, 55269, 55270, 55271, 55272, 55273, 55274, 55275, 55276],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([55267, 55268, 55269,  ..., 61411, 61412, 61413], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1297)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([61414, 61415, 61416, 61417, 61418, 61419, 61420, 61421, 61422, 61423],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([61414, 61415, 61416,  ..., 67549, 67550, 67551], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1300)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([67552, 67553, 67554, 67555, 67556, 67557, 67558, 67559, 67560, 67561],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([67552, 67553, 67554,  ..., 73685, 73686, 73687], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1275)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([73688, 73689, 73690, 73691, 73692, 73693, 73694, 73695, 73696, 73697],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([73688, 73689, 73690,  ..., 79816, 79817, 79818], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1291)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([79819, 79820, 79821, 79822, 79823, 79824, 79825, 79826, 79827, 79828],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([79819, 79820, 79821,  ..., 85962, 85963, 85964], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1267)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([85965, 85966, 85967, 85968, 85969, 85970, 85971, 85972, 85973, 85974],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([85965, 85966, 85967,  ..., 92104, 92105, 92106], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1316)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([92107, 92108, 92109, 92110, 92111, 92112, 92113, 92114, 92115, 92116],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([92107, 92108, 92109,  ..., 98246, 98247, 98248], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1273)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([98249, 98250, 98252, 98253, 98254, 98255, 98256, 98257, 98258, 98259],
       device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([ 98249,  98250,  98252,  ..., 104400, 104401, 104402], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1279)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([104403, 104404, 104405, 104406, 104407, 104408, 104409, 104410, 104411,
        104412], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([104403, 104404, 104405,  ..., 110553, 110554, 110555], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1304)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([110556, 110557, 110558, 110559, 110560, 110561, 110562, 110563, 110564,
        110565], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([110556, 110557, 110558,  ..., 116687, 116688, 116689], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1296)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([116690, 116691, 116692, 116693, 116694, 116695, 116696, 116697, 116698,
        116699], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([116690, 116691, 116692,  ..., 122827, 122828, 122829], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1289)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([122830, 122831, 122832, 122833, 122834, 122835, 122836, 122837, 122838,
        122839], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([122830, 122831, 122832,  ..., 128957, 128958, 128959], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1280)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([128960, 128961, 128962, 128963, 128964, 128965, 128966, 128967, 128968,
        128969], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([128960, 128961, 128962,  ..., 135106, 135107, 135108], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1282)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([135109, 135110, 135111, 135112, 135113, 135114, 135115, 135116, 135117,
        135118], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([135109, 135110, 135111,  ..., 141251, 141252, 141253], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1269)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([141254, 141255, 141256, 141257, 141258, 141259, 141260, 141261, 141263,
        141264], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([141254, 141255, 141256,  ..., 147406, 147407, 147408], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1289)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([147409, 147410, 147411, 147412, 147413, 147414, 147415, 147416, 147417,
        147418], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([147409, 147410, 147411,  ..., 153545, 153546, 153547], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1271)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([153548, 153550, 153551, 153552, 153553, 153554, 153555, 153556, 153557,
        153558], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([153548, 153550, 153551,  ..., 159692, 159693, 159694], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1285)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([159695, 159697, 159698, 159699, 159700, 159701, 159702, 159703, 159704,
        159705], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([159695, 159697, 159698,  ..., 165842, 165843, 165844], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1285)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([165845, 165847, 165848, 165849, 165850, 165851, 165852, 165853, 165854,
        165855], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([165845, 165847, 165848,  ..., 172008, 172009, 172010], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1266)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([172011, 172012, 172013, 172014, 172015, 172016, 172017, 172018, 172019,
        172020], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([172011, 172012, 172013,  ..., 178138, 178139, 178140], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1308)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([178141, 178142, 178143, 178144, 178145, 178146, 178147, 178148, 178149,
        178150], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([178141, 178142, 178143,  ..., 184287, 184288, 184289], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1276)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([184290, 184291, 184292, 184293, 184294, 184295, 184296, 184297, 184298,
        184299], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([184290, 184291, 184292,  ..., 190428, 190429, 190430], device='cuda:0')
the length of bkt_idx in core.py _bucketing 6020
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8068571090698242  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 6020 ratio: 0.030625066769767666 bucket_loss : tensor(0.1289)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566234588623047  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

v3.py : output nodes local nid:  tensor([190431, 190432, 190433, 190434, 190435, 190436, 190437, 190438, 190439,
        190440], device='cuda:0', dtype=torch.int32)
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35566186904907227  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

core.py bucket local nid tensor([190431, 190432, 190433,  ..., 196568, 196569, 196570], device='cuda:0')
the length of bkt_idx in core.py _bucketing 5989
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.8051266670227051  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

degree: tensor(10) # of output: 5989 ratio: 0.030467362937564545 bucket_loss : tensor(0.1284)
----------------------------------------- after loss backward 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35532283782958984  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(4.1145)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 3.5069580078125 GB
    Memory Allocated: 0.35532283782958984  GigaBytes
Max Memory Allocated: 1.5784707069396973  GigaBytes


 Run 0| Epoch 9 |
