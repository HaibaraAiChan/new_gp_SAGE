main start at this time 1670376280.8371243
-----------------------------------------before load data 
 Nvidia-smi: 0.2530517578125 GB
    Memory Allocated: 0.0  GigaBytes
Max Memory Allocated: 0.0  GigaBytes

  NumNodes: 2708
  NumEdges: 10556
  NumFeats: 1433
  NumClasses: 7
  NumTrainingSamples: 140
  NumValidationSamples: 500
  NumTestSamples: 1000
Done loading data from cached files.
success----------------------------------------
140
500
2068
# Nodes: 2708
# Edges: 10556
# Train: 140
# Val: 500
# Test: 2068
# Classes: 7

----------------------------------------start of run function 
 Nvidia-smi: 0.2530517578125 GB
    Memory Allocated: 0.0  GigaBytes
Max Memory Allocated: 0.0  GigaBytes

in feats:  1433
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([ 48, 128, 122,  89, 129,  69,  97, 131,  99, 101], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([ 45,  54,  42,  23,  58,  12, 103,  17,  86,  76,  28,  25,  13,  44,
         71,  99, 106,  22, 119, 128,  65,  78, 110,  73,  94,  31,  48,  66,
        136,  81,  24, 109, 107, 132,  18, 139, 117,  68,  46,  83,  96,  40,
        102,  84,  61,  26, 121, 100,   0,  98,  49,  14,  82,  75, 123, 129,
        135, 124,  72,  52, 125,  60,  36, 116,  62,  90,  30,  92,  29,   5,
        126,  80,  69, 114,  10, 138, 115,  15,  20, 134,  33, 137,  37, 112,
         56,  16, 127,  79,  85,   3,  64, 131, 118,  53, 113, 120,  67,   6,
         27,   8, 133,   9,  32,  51,  59,  91,  35,  19,  87,  74,  77,  50,
         97, 108,  43, 104,  39,  88,  11,  57,  70,  38,   2,  41, 101,  93,
         89, 130,   1,   4,  55,   7,  47,  95, 111,  63, 122,  34,  21, 105],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([129,  11,  85,  74, 120, 114, 113,   3,  90,  52], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 55, 118,  88, 109,  95,  73,  94,  89,  65,  59], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.0792236328125 GB
    Memory Allocated: 0.0657510757446289  GigaBytes
Max Memory Allocated: 0.06575489044189453  GigaBytes

core.py bucket local nid tensor([  3,  11,  52,  74,  85,  90, 113, 114, 120, 129], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([  3,  11,  52,  74,  85,  90, 113, 114, 120, 129], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.1456298828125 GB
    Memory Allocated: 0.07467794418334961  GigaBytes
Max Memory Allocated: 0.0784912109375  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1399)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.2784423828125 GB
    Memory Allocated: 0.12837457656860352  GigaBytes
Max Memory Allocated: 0.19776439666748047  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1399)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4346923828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.34736108779907227  GigaBytes


 Run 0| Epoch 0 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([ 29,  48,  79,  69,  43,  66, 124,  75,  28,  63], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([ 44,  93, 129,  50,  90, 133, 106,  13, 120,  52,  28,  36,  85, 121,
         80,  98, 119,  14,  23,  35, 138, 126,  32, 127, 103,  25, 123, 130,
          8,   0,  91,  73,  56,  10,  16, 111,  99,  48,  40, 102,  66,  68,
         77,   4,  79,  54,  51,  49,   1,  30, 104,  20,  38, 101,  27, 135,
        122,  33,  67,  72,  82, 139,  21,   9,  17, 107,   5,  31,  42,   3,
         34, 108,  81,  70,  86,   7,  64,  15,  63,   2,  69,  43, 112, 116,
         19, 132,  60,  95,  55, 128, 118,  39,  94, 113,  65, 115,  53,  76,
         78,  61,  47,  97,  87,  89,  22, 131,  96,  58, 136,  29,  18,  57,
        105, 110,  12,  46,  74, 124,  92,  88, 125,  24,  62,  59,   6,  41,
        134,  11,  83, 117,  71,  84,  37,  75, 137, 109, 100,  45, 114,  26],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([115, 128, 107,  92,  72,  70, 135,  65,  55,  29], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 95,  89,  65, 118,  59,  73,  55,  94,  88, 109], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4346923828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.34736108779907227  GigaBytes

core.py bucket local nid tensor([ 29,  55,  65,  70,  72,  92, 107, 115, 128, 135], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([ 29,  55,  65,  70,  72,  92, 107, 115, 128, 135], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4346923828125 GB
    Memory Allocated: 0.26253414154052734  GigaBytes
Max Memory Allocated: 0.34736108779907227  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1275)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.3855438232421875  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1275)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.3855438232421875  GigaBytes


 Run 0| Epoch 1 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([ 53,  39,  50,  55,  10,  80, 123,  37, 134,  83], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([ 18,  30,  35, 107,  59, 111, 139,  73, 101,  98,   4, 128,  55,  69,
        116,  84, 103,  34,  49,  61,  86,  79, 100,  89,  66,  13,  39, 135,
         26,  45,  75, 131,  54,  52, 130, 104,  33,   7, 133,   1,  77,  95,
         56,  97,  91,  37,  51, 134,  82,  19,   2,  10,  78,   0,  58,   3,
         48,  81,  57, 117,  41,  22,  40, 123,  63, 102,  96, 119, 137,  53,
        132, 124,  64,  42, 108, 121,  65,  38, 109,  62,   5,  88,  83,   9,
         31,  71,  70, 125,  28,  16, 115, 127,  12, 126,  94,  32,  25,  47,
         72,  27,  68, 122,  14, 113,  76,  24, 120,  74,  67,  93,  43,  15,
        138, 114, 118, 129,  60,  85,  44,  17,  20,  92,  80,   6,  87,  11,
         21,  50, 106, 112, 136,  36,  99, 105,   8,  46,  29,  90, 110,  23],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([ 42, 102,   3,  16,  44,  32, 117,  94,  28,  93], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 73,  65,  55,  89, 118,  95,  59,  94,  88, 109], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.3855438232421875  GigaBytes

core.py bucket local nid tensor([  3,  16,  28,  32,  42,  44,  93,  94, 102, 117], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([  3,  16,  28,  32,  42,  44,  93,  94, 102, 117], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.2625446319580078  GigaBytes
Max Memory Allocated: 0.3855438232421875  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1140)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1140)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes


 Run 0| Epoch 2 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([106,  38,  72,  55,  86,  23, 110,  44,  73, 133], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([103, 125, 110,  72,  87, 120,  85, 113,  57,  20, 139,  48,  29,  68,
         43,  55,  13, 109,  63, 118, 122,  40,  97,   5,  67,  44,  66,  47,
         30, 112,  19, 136, 124,  51,  62,  49,  61,  76,   1,  86, 108,  78,
         42,  34,   7, 133,  98,  82,  90, 137,  23, 119,  10,  79, 135,   3,
        121,  73,  46,  60,  53,  99, 116, 129,  81,  15,  33,  92, 106, 101,
         32,  39,   2,   8,  21,  52,  22, 128, 130,  84,  96, 100,  59, 115,
         27,  64,   4,  58, 117, 127, 126,  31,  74, 138, 102,  91, 134,  54,
         18,  56,  75,  41, 114,  26,  12,  69,   0,  17,  77,  35,   6,  38,
         16, 107,  70,  88, 104,  93,  14, 132,  37, 111,  71,  95, 131,  83,
         50,  24,  89,  94, 123,  36,  25,   9,  80,  11, 105,  65,  28,  45],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([  8,  60,   3,  91,  35, 102,  14, 127,  15, 117], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 73,  59,  55,  95, 109,  94, 118,  89,  65,  88], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

core.py bucket local nid tensor([  3,   8,  14,  15,  35,  60,  91, 102, 117, 127], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([  3,   8,  14,  15,  35,  60,  91, 102, 117, 127], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.26253414154052734  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1403)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1403)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes


 Run 0| Epoch 3 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([128,  15, 123,  91, 135,  81, 110,  66,  41, 139], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([ 15,  75,  70,  65, 101,  98,  82,  18, 105,  19, 112, 129, 131,  27,
         89,   1,  36,  69,  51,  32,  87,  54,  14,  78, 133, 122,  11,  42,
         74,  97,  28,  60,  73,  10,  46,  99,  33,  45, 114,  25,  83,   8,
        111,  95,  12, 127, 130, 110,  39,  81, 138,  24, 124, 126, 123,  92,
         63,  20, 115,  17,  57,  50, 125, 136,  34,  16,   7, 103, 109,  93,
         49, 119,  91, 106,  29,  30, 134,  13,  41, 108,  61,   5,  94, 113,
         31,  43,  56,  90,  72,  88,  84,   3,  62, 139,  67,  26,  80, 102,
         85,  21,  22, 121,  35,  23,  77,  40,  53, 132,  66,  37,   6, 128,
        118,  59,  55,  44,  76, 107,  52,  58,  86, 135, 137,   2,  79, 117,
        100,  96,   0,  48, 116,  68, 120,  71, 104,   4,  64,  38,  47,   9],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([ 16,  17,  26,  37, 106,  88,  72,  52,  67,  92], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 65,  59,  95, 109,  73,  89,  88, 118,  94,  55], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

core.py bucket local nid tensor([ 16,  17,  26,  37,  52,  67,  72,  88,  92, 106], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([ 16,  17,  26,  37,  52,  67,  72,  88,  92, 106], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.26253414154052734  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1059)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1059)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes


 Run 0| Epoch 4 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([  7,   1,   4, 125,  20,  72,  70,  30, 133, 135], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([ 98,   1, 105,  20,   2, 121, 135,   0,  35,  29,  17,  12,  18, 130,
        108, 125,  99,  45, 118, 117,   4,  22, 116, 126,  32,  47,  90, 138,
         27,  80,   7,  57,  28,  58,  92, 132, 122,  49,  39,  37,  79, 127,
         97,  59,  62, 103, 115,  34,  41,  67,  36,  48,  78,  53,  87,  54,
         70, 119,  74, 120, 128, 110,  33,  77, 107,  84,  26,  95,  23,  40,
          6,  75,   5,  61,  50,  24,  25,  11,  85,  14,  86, 131,  94, 124,
         89, 113, 106,  30, 102, 111, 129,  73,  10, 137, 139,  43,  66,  15,
         19, 133, 104, 114,  42,  83,  72,  82, 101,  69,  51,  21,  71,  16,
        134, 109, 123,  46,  91,  68,  13,  60,  88,  38,  96, 112,  63,   3,
        136,  31,  64,  76,  93,  56, 100,   8,  44,   9,  81,  65,  52,  55],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([ 61,  84, 139,  13, 102,  21,  54, 120, 111,  43], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 73,  65,  94, 118,  88, 109,  55,  59,  89,  95], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.2536325454711914  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

core.py bucket local nid tensor([ 13,  21,  43,  54,  61,  84, 102, 111, 120, 139], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([ 13,  21,  43,  54,  61,  84, 102, 111, 120, 139], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.2625555992126465  GigaBytes
Max Memory Allocated: 0.38555431365966797  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1133)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.2536325454711914  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1133)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.2536325454711914  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes


 Run 0| Epoch 5 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([124,  28,  20,  27,  85,   3, 109,  69,  17,  37], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([ 69, 110,  53,   5,  73,  98,  92,  86, 116, 130,  67, 132,  75, 122,
         66, 115, 133,   8,  64,  65,   2,  51,  42,  90, 131,  32, 139,   3,
          1,  33, 105,  49,  19,  23,  77,  60,  14,   9, 129, 108,  10, 109,
        127, 106,  47,  93,  78,  46,  31,  61,  76,  36, 136,  70,  15, 118,
         29,  24,  12, 102, 138,  56,  99, 125, 121, 114,  30,  17,  82,   7,
         22,  21,  38,  54, 126, 113,  94,  88,  25, 134, 120,  57,  11,  68,
         40,   4,  81,  80,  83, 124,  37, 101,  13, 103,  71,  52,  48,  84,
         74, 123, 100,  95,  27,  39,  96, 128, 112,  43, 119,   6,  97,  91,
        137, 117,  18, 111, 107,  85,  50,  41,  89,  59, 135,  34,   0,  28,
         79,  63,  55,  35,  72,  20,  58,  44,  87, 104,  62,  26,  16,  45],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([ 54,  71,  52,  50,  83,   6, 102, 114, 124, 118], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 73,  94,  95, 118,  88, 109,  59,  65,  89,  55], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

core.py bucket local nid tensor([  6,  50,  52,  54,  71,  83, 102, 114, 118, 124], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([  6,  50,  52,  54,  71,  83, 102, 114, 118, 124], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.26253414154052734  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1166)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1166)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25361108779907227  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes


 Run 0| Epoch 6 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([ 14,  31, 110, 136,   8,  70,  77,  87,  93, 139], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([ 97,  68,  37,  82,  47,  77,  17, 127,   4,  85,  53,  66,  64,  81,
          0,  34,  79,  56, 115,  20,  99,  80,  65,  44,  13, 119,  27, 106,
         72, 134,  75,   1, 120, 124,  30,  76,  60,  88,  16, 114, 102, 122,
         96,  39,  41,  71,  69,  31, 101,  73, 116,  14,  33,  84, 139, 100,
         52,  15,  61,  35,  50,  28, 129,  22, 112,  42, 130, 109,  90,  54,
          5, 117, 137,  92,  93, 131,  38,   6, 104, 113,  59, 118, 136,  49,
         70,  29,  11,   7, 121, 125,  91,  12,  48,   8, 105,  74, 103, 133,
         21,  62,  57,  55,  89,  36, 111, 135,  19,  32,  95, 123,   2,  51,
         40,  94,  45,  63,  25,  26, 132,  24, 126, 108,  43, 110, 107,  83,
         10, 138,  18,  58,  86,  78,  98,  23,  67, 128,   3,  87,  46,   9],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([125, 123, 121,  74, 132, 100,  92,  42,  35, 105], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 89, 109,  88,  95, 118,  55,  73,  65,  59,  94], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

core.py bucket local nid tensor([ 35,  42,  74,  92, 100, 105, 121, 123, 125, 132], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([ 35,  42,  74,  92, 100, 105, 121, 123, 125, 132], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.2625446319580078  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1165)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1165)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes


 Run 0| Epoch 7 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([138,  33, 115,  94,  49,  66, 104,  76, 136,  11], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([ 88,  46, 104,  66, 105, 118,  79,  31,  93,  39,  37,   9, 125, 133,
        113, 130,  38, 102,  86, 119, 122,  98,  44, 120,  63, 112,  85,  97,
         91,  36, 116,  60, 138,   1,  11,  52, 132,  99, 103,  32,  20,  87,
        117,  89,  80, 114,  18, 128,  84,   4,  64, 115, 127, 129,  33,  69,
         57, 131,  81, 100,  40,  61,  56, 110, 101,  54,   5,  26,  43, 136,
         62,  59,  71,  42,  68,  17,   7,  12, 134,  51, 121,  24,  95, 108,
         29,  34,  10,  14,  74, 137,  16,  90,  70,  25,   3,  28, 107,  75,
         73,  21, 124,  82,  41,  27,   6,  94,  15, 123,  19,  77,  67, 135,
         48,  30,  53,   2,  78, 111,  13,  22,  76,  23, 109,  65, 126,  50,
         72,  83,  58,  45,  47,  92,  49, 139,  96, 106,   8,  55,   0,  35],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([100,  77,  74,  69,  54,  42,  28,  13, 137,   3], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 59, 109,  88,  55,  65,  73,  95, 118,  89,  94], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362730026245117  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

core.py bucket local nid tensor([  3,  13,  28,  42,  54,  69,  74,  77, 100, 137], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([  3,  13,  28,  42,  54,  69,  74,  77, 100, 137], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.26255035400390625  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1153)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362730026245117  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1153)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362730026245117  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes


 Run 0| Epoch 8 |
{1: 20, 2: 25, 3: 26, 4: 22, 5: 15, 6: 11, 7: 4, 8: 3, 9: 4, 10: 10}
blocks[-1].dstdata[_ID] tensor([117,  93,  74,  46, 123,  69,  42,  13,  70,  12], device='cuda:0')
blocks[-1].dstdata[_ID] torch.return_types.sort(
values=tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139],
       device='cuda:0'),
indices=tensor([119,  17,  73,  14,  91,  78,  57,  94,  71, 109, 138,  60,   9,   7,
         99, 104,  66,  55,  62,  70,  92,  52,  74,  84,  13, 123,  23,  21,
        125,  95,  75, 118,  16,  48,  82,  26,  35,  97,  86,  25,  44,  43,
          6, 100,  33, 131,   3,  46,  80,  19,  15, 128,  69,  59, 112, 134,
        127,  29, 121,  32, 120, 108,  58,  42, 101,  61,  93, 111,  68,   5,
          8,  54,  76,  77,   2, 130,  18,  88,  81,  24,  39,  34, 107,  45,
        136,  51, 126, 124,  50,  11,  98,  38,  96,   1,  31,  41, 115,  36,
        129,  79,  40,  90, 102,  83,  37, 135, 106, 105,  30, 110,  63,  12,
        132,  53,  56, 117,  67,   0,  22,  49,  64,  27,  47,   4,  10,  20,
         89,  87, 137,  85, 139, 122, 103, 116, 114,  72,  65, 113,  28, 133],
       device='cuda:0'))
v3.py : output nodes local nid:  tensor([ 50,  11,  77,  22, 110, 134,  41,  31,  32,  61], device='cuda:0',
       dtype=torch.int32)
v3.py : output nodes global nid:  tensor([ 88,  89,  73, 118, 109,  55,  95,  94,  59,  65], device='cuda:0')
----------------------------------------- before batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

core.py bucket local nid tensor([ 11,  22,  31,  32,  41,  50,  61,  77, 110, 134], device='cuda:0')
the length of bkt_idx in core.py _bucketing 10
core.py : node_bkt local nid:  tensor([ 11,  22,  31,  32,  41,  50,  61,  77, 110, 134], device='cuda:0',
       dtype=torch.int32)
----------------------------------------- after batch_pred = model(blocks, batch_inputs, deg.to(device)) 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.2625446319580078  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

degree: tensor(10) # of output: 10 ratio: 0.07142857142857142 bucket_loss : tensor(0.1133)
----------------------------------------- after loss backward 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes

-------------------------------------------------------loss_sum  :  tensor(0.1133)
----------------------------------------- after optimizer.zero_grad() 
 Nvidia-smi: 1.4659423828125 GB
    Memory Allocated: 0.25362157821655273  GigaBytes
Max Memory Allocated: 0.38556528091430664  GigaBytes


 Run 0| Epoch 9 |
